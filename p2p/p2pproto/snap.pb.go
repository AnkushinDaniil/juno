// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: snap.proto

package p2pproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SnapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*SnapRequest_GetTrieRoot
	//	*SnapRequest_GetClassRange
	//	*SnapRequest_GetAddressRange
	//	*SnapRequest_GetContractRange
	Request isSnapRequest_Request `protobuf_oneof:"request"`
}

func (x *SnapRequest) Reset() {
	*x = SnapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapRequest) ProtoMessage() {}

func (x *SnapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapRequest.ProtoReflect.Descriptor instead.
func (*SnapRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{0}
}

func (m *SnapRequest) GetRequest() isSnapRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SnapRequest) GetGetTrieRoot() *GetRootInfo {
	if x, ok := x.GetRequest().(*SnapRequest_GetTrieRoot); ok {
		return x.GetTrieRoot
	}
	return nil
}

func (x *SnapRequest) GetGetClassRange() *GetClassRange {
	if x, ok := x.GetRequest().(*SnapRequest_GetClassRange); ok {
		return x.GetClassRange
	}
	return nil
}

func (x *SnapRequest) GetGetAddressRange() *GetAddressRange {
	if x, ok := x.GetRequest().(*SnapRequest_GetAddressRange); ok {
		return x.GetAddressRange
	}
	return nil
}

func (x *SnapRequest) GetGetContractRange() *GetContractRange {
	if x, ok := x.GetRequest().(*SnapRequest_GetContractRange); ok {
		return x.GetContractRange
	}
	return nil
}

type isSnapRequest_Request interface {
	isSnapRequest_Request()
}

type SnapRequest_GetTrieRoot struct {
	GetTrieRoot *GetRootInfo `protobuf:"bytes,1,opt,name=get_trie_root,json=getTrieRoot,proto3,oneof"`
}

type SnapRequest_GetClassRange struct {
	GetClassRange *GetClassRange `protobuf:"bytes,2,opt,name=get_class_range,json=getClassRange,proto3,oneof"`
}

type SnapRequest_GetAddressRange struct {
	GetAddressRange *GetAddressRange `protobuf:"bytes,3,opt,name=get_address_range,json=getAddressRange,proto3,oneof"`
}

type SnapRequest_GetContractRange struct {
	GetContractRange *GetContractRange `protobuf:"bytes,4,opt,name=get_contract_range,json=getContractRange,proto3,oneof"`
}

func (*SnapRequest_GetTrieRoot) isSnapRequest_Request() {}

func (*SnapRequest_GetClassRange) isSnapRequest_Request() {}

func (*SnapRequest_GetAddressRange) isSnapRequest_Request() {}

func (*SnapRequest_GetContractRange) isSnapRequest_Request() {}

type SnapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*SnapResponse_RootInfo
	//	*SnapResponse_ClassRange
	//	*SnapResponse_AddressRange
	//	*SnapResponse_ContractRange
	Response isSnapResponse_Response `protobuf_oneof:"response"`
}

func (x *SnapResponse) Reset() {
	*x = SnapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapResponse) ProtoMessage() {}

func (x *SnapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapResponse.ProtoReflect.Descriptor instead.
func (*SnapResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{1}
}

func (m *SnapResponse) GetResponse() isSnapResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SnapResponse) GetRootInfo() *RootInfo {
	if x, ok := x.GetResponse().(*SnapResponse_RootInfo); ok {
		return x.RootInfo
	}
	return nil
}

func (x *SnapResponse) GetClassRange() *ClassRange {
	if x, ok := x.GetResponse().(*SnapResponse_ClassRange); ok {
		return x.ClassRange
	}
	return nil
}

func (x *SnapResponse) GetAddressRange() *AddressRange {
	if x, ok := x.GetResponse().(*SnapResponse_AddressRange); ok {
		return x.AddressRange
	}
	return nil
}

func (x *SnapResponse) GetContractRange() *ContractRange {
	if x, ok := x.GetResponse().(*SnapResponse_ContractRange); ok {
		return x.ContractRange
	}
	return nil
}

type isSnapResponse_Response interface {
	isSnapResponse_Response()
}

type SnapResponse_RootInfo struct {
	RootInfo *RootInfo `protobuf:"bytes,1,opt,name=root_info,json=rootInfo,proto3,oneof"`
}

type SnapResponse_ClassRange struct {
	ClassRange *ClassRange `protobuf:"bytes,2,opt,name=class_range,json=classRange,proto3,oneof"`
}

type SnapResponse_AddressRange struct {
	AddressRange *AddressRange `protobuf:"bytes,3,opt,name=address_range,json=addressRange,proto3,oneof"`
}

type SnapResponse_ContractRange struct {
	ContractRange *ContractRange `protobuf:"bytes,4,opt,name=contract_range,json=contractRange,proto3,oneof"`
}

func (*SnapResponse_RootInfo) isSnapResponse_Response() {}

func (*SnapResponse_ClassRange) isSnapResponse_Response() {}

func (*SnapResponse_AddressRange) isSnapResponse_Response() {}

func (*SnapResponse_ContractRange) isSnapResponse_Response() {}

type GetRootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash *FieldElement `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *GetRootInfo) Reset() {
	*x = GetRootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRootInfo) ProtoMessage() {}

func (x *GetRootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRootInfo.ProtoReflect.Descriptor instead.
func (*GetRootInfo) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{2}
}

func (x *GetRootInfo) GetBlockHash() *FieldElement {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type RootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageRoot *FieldElement `protobuf:"bytes,1,opt,name=storage_root,json=storageRoot,proto3" json:"storage_root,omitempty"`
	ClassRoot   *FieldElement `protobuf:"bytes,2,opt,name=class_root,json=classRoot,proto3" json:"class_root,omitempty"`
}

func (x *RootInfo) Reset() {
	*x = RootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootInfo) ProtoMessage() {}

func (x *RootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootInfo.ProtoReflect.Descriptor instead.
func (*RootInfo) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{3}
}

func (x *RootInfo) GetStorageRoot() *FieldElement {
	if x != nil {
		return x.StorageRoot
	}
	return nil
}

func (x *RootInfo) GetClassRoot() *FieldElement {
	if x != nil {
		return x.ClassRoot
	}
	return nil
}

type GetClassRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      *FieldElement `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	StartAddr *FieldElement `protobuf:"bytes,2,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	LimitAddr *FieldElement `protobuf:"bytes,3,opt,name=limit_addr,json=limitAddr,proto3" json:"limit_addr,omitempty"`
	MaxNodes  uint64        `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *GetClassRange) Reset() {
	*x = GetClassRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassRange) ProtoMessage() {}

func (x *GetClassRange) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassRange.ProtoReflect.Descriptor instead.
func (*GetClassRange) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{4}
}

func (x *GetClassRange) GetRoot() *FieldElement {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetClassRange) GetStartAddr() *FieldElement {
	if x != nil {
		return x.StartAddr
	}
	return nil
}

func (x *GetClassRange) GetLimitAddr() *FieldElement {
	if x != nil {
		return x.LimitAddr
	}
	return nil
}

func (x *GetClassRange) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type ClassRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths       []*FieldElement  `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	ClassHashes []*FieldElement  `protobuf:"bytes,2,rep,name=class_hashes,json=classHashes,proto3" json:"class_hashes,omitempty"`
	Classes     []*ContractClass `protobuf:"bytes,3,rep,name=classes,proto3" json:"classes,omitempty"`
	Proofs      []*ProofNode     `protobuf:"bytes,4,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *ClassRange) Reset() {
	*x = ClassRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassRange) ProtoMessage() {}

func (x *ClassRange) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassRange.ProtoReflect.Descriptor instead.
func (*ClassRange) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{5}
}

func (x *ClassRange) GetPaths() []*FieldElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ClassRange) GetClassHashes() []*FieldElement {
	if x != nil {
		return x.ClassHashes
	}
	return nil
}

func (x *ClassRange) GetClasses() []*ContractClass {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *ClassRange) GetProofs() []*ProofNode {
	if x != nil {
		return x.Proofs
	}
	return nil
}

type GetAddressRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root      *FieldElement `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	StartAddr *FieldElement `protobuf:"bytes,2,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	LimitAddr *FieldElement `protobuf:"bytes,3,opt,name=limit_addr,json=limitAddr,proto3" json:"limit_addr,omitempty"`
	MaxNodes  uint64        `protobuf:"varint,4,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *GetAddressRange) Reset() {
	*x = GetAddressRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRange) ProtoMessage() {}

func (x *GetAddressRange) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRange.ProtoReflect.Descriptor instead.
func (*GetAddressRange) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{6}
}

func (x *GetAddressRange) GetRoot() *FieldElement {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetAddressRange) GetStartAddr() *FieldElement {
	if x != nil {
		return x.StartAddr
	}
	return nil
}

func (x *GetAddressRange) GetLimitAddr() *FieldElement {
	if x != nil {
		return x.LimitAddr
	}
	return nil
}

func (x *GetAddressRange) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type AddressRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths  []*FieldElement     `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Hashes []*FieldElement     `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	Proofs []*ProofNode        `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
	Leaves []*AddressRangeLeaf `protobuf:"bytes,4,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *AddressRange) Reset() {
	*x = AddressRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressRange) ProtoMessage() {}

func (x *AddressRange) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressRange.ProtoReflect.Descriptor instead.
func (*AddressRange) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{7}
}

func (x *AddressRange) GetPaths() []*FieldElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *AddressRange) GetHashes() []*FieldElement {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *AddressRange) GetProofs() []*ProofNode {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *AddressRange) GetLeaves() []*AddressRangeLeaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

type AddressRangeLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractStorageRoot *FieldElement `protobuf:"bytes,1,opt,name=contract_storage_root,json=contractStorageRoot,proto3" json:"contract_storage_root,omitempty"`
	Class               *FieldElement `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	Nonce               *FieldElement `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *AddressRangeLeaf) Reset() {
	*x = AddressRangeLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressRangeLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressRangeLeaf) ProtoMessage() {}

func (x *AddressRangeLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressRangeLeaf.ProtoReflect.Descriptor instead.
func (*AddressRangeLeaf) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{8}
}

func (x *AddressRangeLeaf) GetContractStorageRoot() *FieldElement {
	if x != nil {
		return x.ContractStorageRoot
	}
	return nil
}

func (x *AddressRangeLeaf) GetClass() *FieldElement {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *AddressRangeLeaf) GetNonce() *FieldElement {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type GetContractRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root     *FieldElement           `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	Requests []*ContractRangeRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	MaxNodes uint64                  `protobuf:"varint,3,opt,name=max_nodes,json=maxNodes,proto3" json:"max_nodes,omitempty"`
}

func (x *GetContractRange) Reset() {
	*x = GetContractRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRange) ProtoMessage() {}

func (x *GetContractRange) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRange.ProtoReflect.Descriptor instead.
func (*GetContractRange) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{9}
}

func (x *GetContractRange) GetRoot() *FieldElement {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetContractRange) GetRequests() []*ContractRangeRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *GetContractRange) GetMaxNodes() uint64 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

type ContractRangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      *FieldElement `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Hash      *FieldElement `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	StartAddr *FieldElement `protobuf:"bytes,3,opt,name=start_addr,json=startAddr,proto3" json:"start_addr,omitempty"`
	LimitAddr *FieldElement `protobuf:"bytes,4,opt,name=limit_addr,json=limitAddr,proto3" json:"limit_addr,omitempty"`
}

func (x *ContractRangeRequest) Reset() {
	*x = ContractRangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRangeRequest) ProtoMessage() {}

func (x *ContractRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRangeRequest.ProtoReflect.Descriptor instead.
func (*ContractRangeRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{10}
}

func (x *ContractRangeRequest) GetPath() *FieldElement {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ContractRangeRequest) GetHash() *FieldElement {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ContractRangeRequest) GetStartAddr() *FieldElement {
	if x != nil {
		return x.StartAddr
	}
	return nil
}

func (x *ContractRangeRequest) GetLimitAddr() *FieldElement {
	if x != nil {
		return x.LimitAddr
	}
	return nil
}

type ContractRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*ContractRangeResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ContractRange) Reset() {
	*x = ContractRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRange) ProtoMessage() {}

func (x *ContractRange) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRange.ProtoReflect.Descriptor instead.
func (*ContractRange) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{11}
}

func (x *ContractRange) GetResponses() []*ContractRangeResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type ContractRangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths  []*FieldElement `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	Values []*FieldElement `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Proofs []*ProofNode    `protobuf:"bytes,3,rep,name=proofs,proto3" json:"proofs,omitempty"`
}

func (x *ContractRangeResponse) Reset() {
	*x = ContractRangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractRangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractRangeResponse) ProtoMessage() {}

func (x *ContractRangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractRangeResponse.ProtoReflect.Descriptor instead.
func (*ContractRangeResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{12}
}

func (x *ContractRangeResponse) GetPaths() []*FieldElement {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ContractRangeResponse) GetValues() []*FieldElement {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ContractRangeResponse) GetProofs() []*ProofNode {
	if x != nil {
		return x.Proofs
	}
	return nil
}

// Its a bitset in juno. Its a truncated field_element. Probably should use bytes though... But I'm lazy.
type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length   uint32        `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	FullPath *FieldElement `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{13}
}

func (x *Path) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Path) GetFullPath() *FieldElement {
	if x != nil {
		return x.FullPath
	}
	return nil
}

type ProofNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *Path         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Hash *FieldElement `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ProofNode) Reset() {
	*x = ProofNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofNode) ProtoMessage() {}

func (x *ProofNode) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofNode.ProtoReflect.Descriptor instead.
func (*ProofNode) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{14}
}

func (x *ProofNode) GetKey() *Path {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ProofNode) GetHash() *FieldElement {
	if x != nil {
		return x.Hash
	}
	return nil
}

var File_snap_proto protoreflect.FileDescriptor

var file_snap_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x53, 0x6e,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x65, 0x74,
	0x5f, 0x74, 0x72, 0x69, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b,
	0x67, 0x65, 0x74, 0x54, 0x72, 0x69, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x4f, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x02,
	0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x08, 0x52, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e,
	0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x65, 0x61, 0x66, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0xcf, 0x01,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65,
	0x61, 0x66, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b,
	0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x22, 0x53, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0x5a, 0x0a,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3a, 0x0a,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x09, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74,
	0x61, 0x72, 0x6b, 0x6e, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f, 0x70, 0x32, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snap_proto_rawDescOnce sync.Once
	file_snap_proto_rawDescData = file_snap_proto_rawDesc
)

func file_snap_proto_rawDescGZIP() []byte {
	file_snap_proto_rawDescOnce.Do(func() {
		file_snap_proto_rawDescData = protoimpl.X.CompressGZIP(file_snap_proto_rawDescData)
	})
	return file_snap_proto_rawDescData
}

var file_snap_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_snap_proto_goTypes = []interface{}{
	(*SnapRequest)(nil),           // 0: starknet.snap.SnapRequest
	(*SnapResponse)(nil),          // 1: starknet.snap.SnapResponse
	(*GetRootInfo)(nil),           // 2: starknet.snap.GetRootInfo
	(*RootInfo)(nil),              // 3: starknet.snap.RootInfo
	(*GetClassRange)(nil),         // 4: starknet.snap.GetClassRange
	(*ClassRange)(nil),            // 5: starknet.snap.ClassRange
	(*GetAddressRange)(nil),       // 6: starknet.snap.GetAddressRange
	(*AddressRange)(nil),          // 7: starknet.snap.AddressRange
	(*AddressRangeLeaf)(nil),      // 8: starknet.snap.AddressRangeLeaf
	(*GetContractRange)(nil),      // 9: starknet.snap.GetContractRange
	(*ContractRangeRequest)(nil),  // 10: starknet.snap.ContractRangeRequest
	(*ContractRange)(nil),         // 11: starknet.snap.ContractRange
	(*ContractRangeResponse)(nil), // 12: starknet.snap.ContractRangeResponse
	(*Path)(nil),                  // 13: starknet.snap.Path
	(*ProofNode)(nil),             // 14: starknet.snap.ProofNode
	(*FieldElement)(nil),          // 15: starknet.common.FieldElement
	(*ContractClass)(nil),         // 16: starknet.common.ContractClass
}
var file_snap_proto_depIdxs = []int32{
	2,  // 0: starknet.snap.SnapRequest.get_trie_root:type_name -> starknet.snap.GetRootInfo
	4,  // 1: starknet.snap.SnapRequest.get_class_range:type_name -> starknet.snap.GetClassRange
	6,  // 2: starknet.snap.SnapRequest.get_address_range:type_name -> starknet.snap.GetAddressRange
	9,  // 3: starknet.snap.SnapRequest.get_contract_range:type_name -> starknet.snap.GetContractRange
	3,  // 4: starknet.snap.SnapResponse.root_info:type_name -> starknet.snap.RootInfo
	5,  // 5: starknet.snap.SnapResponse.class_range:type_name -> starknet.snap.ClassRange
	7,  // 6: starknet.snap.SnapResponse.address_range:type_name -> starknet.snap.AddressRange
	11, // 7: starknet.snap.SnapResponse.contract_range:type_name -> starknet.snap.ContractRange
	15, // 8: starknet.snap.GetRootInfo.block_hash:type_name -> starknet.common.FieldElement
	15, // 9: starknet.snap.RootInfo.storage_root:type_name -> starknet.common.FieldElement
	15, // 10: starknet.snap.RootInfo.class_root:type_name -> starknet.common.FieldElement
	15, // 11: starknet.snap.GetClassRange.root:type_name -> starknet.common.FieldElement
	15, // 12: starknet.snap.GetClassRange.start_addr:type_name -> starknet.common.FieldElement
	15, // 13: starknet.snap.GetClassRange.limit_addr:type_name -> starknet.common.FieldElement
	15, // 14: starknet.snap.ClassRange.paths:type_name -> starknet.common.FieldElement
	15, // 15: starknet.snap.ClassRange.class_hashes:type_name -> starknet.common.FieldElement
	16, // 16: starknet.snap.ClassRange.classes:type_name -> starknet.common.ContractClass
	14, // 17: starknet.snap.ClassRange.proofs:type_name -> starknet.snap.ProofNode
	15, // 18: starknet.snap.GetAddressRange.root:type_name -> starknet.common.FieldElement
	15, // 19: starknet.snap.GetAddressRange.start_addr:type_name -> starknet.common.FieldElement
	15, // 20: starknet.snap.GetAddressRange.limit_addr:type_name -> starknet.common.FieldElement
	15, // 21: starknet.snap.AddressRange.paths:type_name -> starknet.common.FieldElement
	15, // 22: starknet.snap.AddressRange.hashes:type_name -> starknet.common.FieldElement
	14, // 23: starknet.snap.AddressRange.proofs:type_name -> starknet.snap.ProofNode
	8,  // 24: starknet.snap.AddressRange.leaves:type_name -> starknet.snap.AddressRangeLeaf
	15, // 25: starknet.snap.AddressRangeLeaf.contract_storage_root:type_name -> starknet.common.FieldElement
	15, // 26: starknet.snap.AddressRangeLeaf.class:type_name -> starknet.common.FieldElement
	15, // 27: starknet.snap.AddressRangeLeaf.nonce:type_name -> starknet.common.FieldElement
	15, // 28: starknet.snap.GetContractRange.root:type_name -> starknet.common.FieldElement
	10, // 29: starknet.snap.GetContractRange.requests:type_name -> starknet.snap.ContractRangeRequest
	15, // 30: starknet.snap.ContractRangeRequest.path:type_name -> starknet.common.FieldElement
	15, // 31: starknet.snap.ContractRangeRequest.hash:type_name -> starknet.common.FieldElement
	15, // 32: starknet.snap.ContractRangeRequest.start_addr:type_name -> starknet.common.FieldElement
	15, // 33: starknet.snap.ContractRangeRequest.limit_addr:type_name -> starknet.common.FieldElement
	12, // 34: starknet.snap.ContractRange.responses:type_name -> starknet.snap.ContractRangeResponse
	15, // 35: starknet.snap.ContractRangeResponse.paths:type_name -> starknet.common.FieldElement
	15, // 36: starknet.snap.ContractRangeResponse.values:type_name -> starknet.common.FieldElement
	14, // 37: starknet.snap.ContractRangeResponse.proofs:type_name -> starknet.snap.ProofNode
	15, // 38: starknet.snap.Path.full_path:type_name -> starknet.common.FieldElement
	13, // 39: starknet.snap.ProofNode.key:type_name -> starknet.snap.Path
	15, // 40: starknet.snap.ProofNode.hash:type_name -> starknet.common.FieldElement
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_snap_proto_init() }
func file_snap_proto_init() {
	if File_snap_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_snap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressRangeLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractRangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_snap_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SnapRequest_GetTrieRoot)(nil),
		(*SnapRequest_GetClassRange)(nil),
		(*SnapRequest_GetAddressRange)(nil),
		(*SnapRequest_GetContractRange)(nil),
	}
	file_snap_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SnapResponse_RootInfo)(nil),
		(*SnapResponse_ClassRange)(nil),
		(*SnapResponse_AddressRange)(nil),
		(*SnapResponse_ContractRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snap_proto_goTypes,
		DependencyIndexes: file_snap_proto_depIdxs,
		MessageInfos:      file_snap_proto_msgTypes,
	}.Build()
	File_snap_proto = out.File
	file_snap_proto_rawDesc = nil
	file_snap_proto_goTypes = nil
	file_snap_proto_depIdxs = nil
}
