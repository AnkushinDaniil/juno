package p2p

import (
	"encoding/json"
	"fmt"
	"github.com/NethermindEth/juno/core"
	"github.com/NethermindEth/juno/utils"
	"github.com/stretchr/testify/assert"
	"testing"
)

var blocks = []*core.Block{
	/*
		{
			Header: unsafeDecodeJson[*core.Header]("{\"Hash\":\"0x27d1e625a4293d2ed162eb2a1ad031cf71eaa2bab3a3d10fe9bddc51b877ccd\",\"ParentHash\":\"0x16b00cd0ed871bccdfed41fac05ef64c025f6df61a8369d62db777bc0872f62\",\"Number\":192,\"GlobalStateRoot\":\"0x2e3dcf2a28f3c4d53fdc5970cb43ddb27f1ecab5ba6da9074c266a195b4598c\",\"SequencerAddress\":null,\"TransactionCount\":1,\"EventCount\":0,\"Timestamp\":1638440748,\"ProtocolVersion\":\"\",\"ExtraData\":null,\"EventsBloom\":{\"m\":8192,\"k\":6,\"b}}"),
			Transactions: []core.Transaction{
				unsafeDecodeJson[*core.L1HandlerTransaction]("{\"TransactionHash\":\"0x5d50b7020f7cf8033fd7d913e489f47edf74fbf3c8ada85be512c7baa6a2eab\",\"ContractAddress\":\"0x58b43819bb12aba8ab3fb2e997523e507399a3f48a1e2aa20a5fb7734a0449f\",\"EntryPointSelector\":\"0xe3f5e9e1456ffa52a3fbc7e8c296631d4cc2120c0be1e2829301c0d8fa026b\",\"Nonce\":null,\"CallData\":[\"0x5474c49483aa09993090979ade8101ebb4cdce4a\",\"0xabf8dd8438d1c21e83a8b5e9c1f9b58aaf3ed360\",\"0x2\",\"0x4c04fac82913f01a8f01f6e15ff7e834ff2d9a9a1d8e9adffc7bd45692f4f9a\"],\"Version\":\"0x0\"}"),
			},
			Receipts: []*core.TransactionReceipt{
				unsafeDecodeJson[*core.TransactionReceipt]("{\n    \"Fee\": \"0x0\",\n    \"Events\": [],\n    \"ExecutionResources\": {\n        \"BuiltinInstanceCounter\": {\n            \"Bitwise\": 0,\n            \"EcOp\": 0,\n            \"Ecsda\": 0,\n            \"Output\": 0,\n            \"Pedersen\": 2,\n            \"RangeCheck\": 6\n        },\n        \"MemoryHoles\": 22,\n        \"Steps\": 193\n    },\n    \"L1ToL2Message\": {\n        \"From\": \"0x5474c49483aa09993090979ade8101ebb4cdce4a\",\n        \"Nonce\": null,\n        \"Payload\": [\n            \"0xabf8dd8438d1c21e83a8b5e9c1f9b58aaf3ed360\",\n            \"0x2\",\n            \"0x4c04fac82913f01a8f01f6e15ff7e834ff2d9a9a1d8e9adffc7bd45692f4f9a\"\n        ],\n        \"Selector\": \"0xe3f5e9e1456ffa52a3fbc7e8c296631d4cc2120c0be1e2829301c0d8fa026b\",\n        \"To\": \"0x58b43819bb12aba8ab3fb2e997523e507399a3f48a1e2aa20a5fb7734a0449f\"\n    },\n    \"L2ToL1Message\": [],\n    \"TransactionHash\": \"0x5d50b7020f7cf8033fd7d913e489f47edf74fbf3c8ada85be512c7baa6a2eab\"\n}"),
			},
		},
	*/
	{
		Header: unsafeDecodeJson[*core.Header]("{\"Hash\":\"0x27d1e625a4293d2ed162eb2a1ad031cf71eaa2bab3a3d10fe9bddc51b877ccd\",\"ParentHash\":\"0x16b00cd0ed871bccdfed41fac05ef64c025f6df61a8369d62db777bc0872f62\",\"Number\":192,\"GlobalStateRoot\":\"0x2e3dcf2a28f3c4d53fdc5970cb43ddb27f1ecab5ba6da9074c266a195b4598c\",\"SequencerAddress\":null,\"TransactionCount\":1,\"EventCount\":1,\"Timestamp\":1638440748,\"ProtocolVersion\":\"\",\"ExtraData\":null,\"EventsBloom\":{\"m\":8192,\"k\":6,\"b}}"),
		Transactions: []core.Transaction{
			unsafeDecodeJson[*core.L1HandlerTransaction]("{\"TransactionHash\":\"0x63168dfcbbaa422e48e107f89dfdf62c459bf12ac41ac843b8dcece6da1a44c\",\"CallData\":[\"0x3a9f7d60be2095d10f683bb909cf185f848255d2246b3c2a1d20974b5cb4071\",\"0x2913ee03e5e3308c41e308bd391ea4faac9b9cb5062c76a6b3ab4f65397e106\",\"0xb\",\"0x3\",\"0xb83f204dcb21221bd5ef3d70b06988cd4beaa4d48ff498a1a0c9e1e49e2804\",\"0x6fafe187c4cf4500e0d98206bd18ba0ac499021492ba30d298a56bf3c13f0e9\",\"0x47a4c36c2932f213e7b054c9573e49a6681d5b710d1b25a96ea6346f5689929\",\"0x6\",\"0x36892724ef934c45843ba52a8dd62660f2017b34343a4a585a83949ef77525d\",\"0x4c8d9274e67e6e933dcea8e45226e3b786ff42b94b5719a35e0db3ddb261b4a\",\"0x427147c2e621d81112d2102afbcbfa7b734f88fbf64763df1d3bbc84aa32b49\",\"0x181b740620c32cfc7f3275b3411e7606e971d81cfb01bca41a48b4a3cabf4fd\",\"0x2e9ff20206fc435a18d7341361d36afcf20474ab574b9e4c8e6852eb852a7f7\",\"0x11083c0570506155829955f78935b41cc3fe289f400651211cc77d9c5b89640\"],\"TransactionSignature\":[],\"MaxFee\":\"0x0\",\"ContractAddress\":\"0x6eb89aaabeb41d87865b9877108fcd99959aa8bf450e76495d5be59eca5aa2c\",\"Version\":\"0x0\",\"EntryPointSelector\":\"0x27c3334165536f239cfd400ed956eabff55fc60de4fb56728b6a4f6b87db01c\",\"Nonce\":null,\"SenderAddress\":null}"),
		},
		Receipts: []*core.TransactionReceipt{
			unsafeDecodeJson[*core.TransactionReceipt]("{\"Fee\":\"0x0\",\"Events\":[{\"Data\":[\"0x36892724ef934c45843ba52a8dd62660f2017b34343a4a585a83949ef77525d\",\"0x4c8d9274e67e6e933dcea8e45226e3b786ff42b94b5719a35e0db3ddb261b4a\",\"0x427147c2e621d81112d2102afbcbfa7b734f88fbf64763df1d3bbc84aa32b49\",\"0x181b740620c32cfc7f3275b3411e7606e971d81cfb01bca41a48b4a3cabf4fd\",\"0x2e9ff20206fc435a18d7341361d36afcf20474ab574b9e4c8e6852eb852a7f7\",\"0x11083c0570506155829955f78935b41cc3fe289f400651211cc77d9c5b89640\"],\"From\":\"0x3a9f7d60be2095d10f683bb909cf185f848255d2246b3c2a1d20974b5cb4071\",\"Keys\":[\"0xb83f204dcb21221bd5ef3d70b06988cd4beaa4d48ff498a1a0c9e1e49e2804\",\"0x6fafe187c4cf4500e0d98206bd18ba0ac499021492ba30d298a56bf3c13f0e9\",\"0x47a4c36c2932f213e7b054c9573e49a6681d5b710d1b25a96ea6346f5689929\"]}],\"ExecutionResources\":{\"BuiltinInstanceCounter\":{\"Bitwise\":0,\"EcOp\":0,\"Ecsda\":0,\"Output\":0,\"Pedersen\":0,\"RangeCheck\":3},\"MemoryHoles\":20,\"Steps\":83},\"L1ToL2Message\":null,\"L2ToL1Message\":[],\"TransactionHash\":\"0x63168dfcbbaa422e48e107f89dfdf62c459bf12ac41ac843b8dcece6da1a44c\"}"),
		},
	},
}

func unsafeDecodeJson[T any](jsonstr string) T {
	var obj T

	err := json.Unmarshal([]byte(jsonstr), &obj)
	if err != nil {
		panic(err)
	}

	return obj
}

func TestEncodeDecode(t *testing.T) {
	for i, block := range blocks {
		t.Run(fmt.Sprintf("%d", i), func(t *testing.T) {
			runEncodeDecodeTest(t, block)
		})
	}
}

func runEncodeDecodeTest(t *testing.T, originalBlock *core.Block) {
	// Convert original struct to protobuf struct
	header, err := coreBlockToProtobufHeader(originalBlock)
	if err != nil {
		t.Fatalf("to protobuf failed %v", err)
	}

	body := coreBlockToProtobufBody(originalBlock)

	// Convert protobuf struct back to original struct
	convertedBlock, err := protobufHeaderAndBodyToCoreBlock(header, body, utils.MAINNET)
	if err != nil {
		t.Fatalf("back to core failed %v", err)
	}

	// Check if the final struct is equal to the original struct
	assert.Equal(t, originalBlock, convertedBlock)
}
