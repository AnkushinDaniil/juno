syntax = "proto3";
option go_package = "../p2pproto";

package starknet.snap;

import "common.proto";

message SnapRequest {
  oneof request {
    GetRootInfo get_trie_root = 1;
    GetClassRange get_class_range = 2;
    GetAddressRange get_address_range = 3;
    GetContractRange get_contract_range = 4;
  }
}

message SnapResponse {
  oneof response {
    RootInfo root_info = 1;
    ClassRange class_range = 2;
    AddressRange address_range = 3;
    ContractRange contract_range = 4;
  }
}

message GetRootInfo {
  starknet.common.FieldElement block_hash = 1;
}

message RootInfo {
  starknet.common.FieldElement storage_root = 1;
  starknet.common.FieldElement class_root = 2;
}

message GetClassRange {
  starknet.common.FieldElement root = 1;
  starknet.common.FieldElement start_addr = 2;
  starknet.common.FieldElement limit_addr = 3;
  uint64 max_nodes = 4;
}

message ClassRange {
  repeated starknet.common.FieldElement paths = 1;
  repeated starknet.common.FieldElement class_hashes = 2;
  repeated starknet.common.ContractClass classes = 3;
  repeated ProofNode proofs = 4;
}

message GetAddressRange {
  starknet.common.FieldElement root = 1;
  starknet.common.FieldElement start_addr = 2;
  starknet.common.FieldElement limit_addr = 3;
  uint64 max_nodes = 4;
}

message AddressRange {
  repeated starknet.common.FieldElement paths = 1;
  repeated starknet.common.FieldElement hashes = 2;
  repeated ProofNode proofs = 3;
  repeated AddressRangeLeaf leaves = 4;
}

message AddressRangeLeaf {
  starknet.common.FieldElement contract_storage_root = 1;
  starknet.common.FieldElement class = 2;
  starknet.common.FieldElement nonce = 3;
}

message GetContractRange {
  starknet.common.FieldElement root = 1;
  repeated ContractRangeRequest requests = 2;
  uint64 mx_nodes = 3;
}

message ContractRangeRequest {
  starknet.common.FieldElement path = 1;
  starknet.common.FieldElement hash = 2;
  starknet.common.FieldElement start_addr = 3;
  starknet.common.FieldElement limit_addr = 4;
}

message ContractRange {
  repeated ContractRangeResponse responses = 1;
}

message ContractRangeResponse {
  repeated starknet.common.FieldElement paths = 1;
  repeated starknet.common.FieldElement values = 2;
  repeated ProofNode proofs = 3;
}

// Its a bitset in juno. Its a truncated field_element. Probably should use bytes though... But I'm lazy.
message Path {
  uint32 length = 1;
  starknet.common.FieldElement full_path = 2;
}

message ProofNode {
  Path key = 1;
  starknet.common.FieldElement hash = 2;
}
