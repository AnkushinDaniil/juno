// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/sync (interfaces: Reader)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	felt "github.com/NethermindEth/juno/core/felt"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncReader is a mock of Reader interface.
type MockSyncReader struct {
	ctrl     *gomock.Controller
	recorder *MockSyncReaderMockRecorder
}

// MockSyncReaderMockRecorder is the mock recorder for MockSyncReader.
type MockSyncReaderMockRecorder struct {
	mock *MockSyncReader
}

// NewMockSyncReader creates a new mock instance.
func NewMockSyncReader(ctrl *gomock.Controller) *MockSyncReader {
	mock := &MockSyncReader{ctrl: ctrl}
	mock.recorder = &MockSyncReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncReader) EXPECT() *MockSyncReaderMockRecorder {
	return m.recorder
}

// HighestBlockHash mocks base method.
func (m *MockSyncReader) HighestBlockHash() *felt.Felt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighestBlockHash")
	ret0, _ := ret[0].(*felt.Felt)
	return ret0
}

// HighestBlockHash indicates an expected call of HighestBlockHash.
func (mr *MockSyncReaderMockRecorder) HighestBlockHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighestBlockHash", reflect.TypeOf((*MockSyncReader)(nil).HighestBlockHash))
}

// HighestBlockNumber mocks base method.
func (m *MockSyncReader) HighestBlockNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HighestBlockNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// HighestBlockNumber indicates an expected call of HighestBlockNumber.
func (mr *MockSyncReaderMockRecorder) HighestBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HighestBlockNumber", reflect.TypeOf((*MockSyncReader)(nil).HighestBlockNumber))
}

// StartingBlockNumber mocks base method.
func (m *MockSyncReader) StartingBlockNumber() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartingBlockNumber")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartingBlockNumber indicates an expected call of StartingBlockNumber.
func (mr *MockSyncReaderMockRecorder) StartingBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartingBlockNumber", reflect.TypeOf((*MockSyncReader)(nil).StartingBlockNumber))
}
