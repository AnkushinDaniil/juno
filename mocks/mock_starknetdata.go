// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/starknetdata (interfaces: StarknetDataInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/NethermindEth/juno/core"
	felt "github.com/NethermindEth/juno/core/felt"
	gomock "github.com/golang/mock/gomock"
)

// MockStarknetDataInterface is a mock of StarknetDataInterface interface.
type MockStarknetDataInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStarknetDataInterfaceMockRecorder
}

// MockStarknetDataInterfaceMockRecorder is the mock recorder for MockStarknetDataInterface.
type MockStarknetDataInterfaceMockRecorder struct {
	mock *MockStarknetDataInterface
}

// NewMockStarknetDataInterface creates a new mock instance.
func NewMockStarknetDataInterface(ctrl *gomock.Controller) *MockStarknetDataInterface {
	mock := &MockStarknetDataInterface{ctrl: ctrl}
	mock.recorder = &MockStarknetDataInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStarknetDataInterface) EXPECT() *MockStarknetDataInterfaceMockRecorder {
	return m.recorder
}

// BlockByNumber mocks base method.
func (m *MockStarknetDataInterface) BlockByNumber(arg0 context.Context, arg1 uint64) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", arg0, arg1)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockStarknetDataInterfaceMockRecorder) BlockByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockStarknetDataInterface)(nil).BlockByNumber), arg0, arg1)
}

// BlockLatest mocks base method.
func (m *MockStarknetDataInterface) BlockLatest(arg0 context.Context) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockLatest", arg0)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockLatest indicates an expected call of BlockLatest.
func (mr *MockStarknetDataInterfaceMockRecorder) BlockLatest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockLatest", reflect.TypeOf((*MockStarknetDataInterface)(nil).BlockLatest), arg0)
}

// BlockPending mocks base method.
func (m *MockStarknetDataInterface) BlockPending(arg0 context.Context) (*core.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockPending", arg0)
	ret0, _ := ret[0].(*core.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockPending indicates an expected call of BlockPending.
func (mr *MockStarknetDataInterfaceMockRecorder) BlockPending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockPending", reflect.TypeOf((*MockStarknetDataInterface)(nil).BlockPending), arg0)
}

// Class mocks base method.
func (m *MockStarknetDataInterface) Class(arg0 context.Context, arg1 *felt.Felt) (core.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Class", arg0, arg1)
	ret0, _ := ret[0].(core.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Class indicates an expected call of Class.
func (mr *MockStarknetDataInterfaceMockRecorder) Class(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Class", reflect.TypeOf((*MockStarknetDataInterface)(nil).Class), arg0, arg1)
}

// StateUpdate mocks base method.
func (m *MockStarknetDataInterface) StateUpdate(arg0 context.Context, arg1 uint64) (*core.StateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdate", arg0, arg1)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdate indicates an expected call of StateUpdate.
func (mr *MockStarknetDataInterfaceMockRecorder) StateUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdate", reflect.TypeOf((*MockStarknetDataInterface)(nil).StateUpdate), arg0, arg1)
}

// StateUpdatePending mocks base method.
func (m *MockStarknetDataInterface) StateUpdatePending(arg0 context.Context) (*core.StateUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateUpdatePending", arg0)
	ret0, _ := ret[0].(*core.StateUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateUpdatePending indicates an expected call of StateUpdatePending.
func (mr *MockStarknetDataInterfaceMockRecorder) StateUpdatePending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateUpdatePending", reflect.TypeOf((*MockStarknetDataInterface)(nil).StateUpdatePending), arg0)
}

// Transaction mocks base method.
func (m *MockStarknetDataInterface) Transaction(arg0 context.Context, arg1 *felt.Felt) (core.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(core.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockStarknetDataInterfaceMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockStarknetDataInterface)(nil).Transaction), arg0, arg1)
}
