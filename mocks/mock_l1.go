// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NethermindEth/juno/sync (interfaces: L1)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	core "github.com/NethermindEth/juno/core"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockL1 is a mock of L1 interface.
type MockL1 struct {
	ctrl     *gomock.Controller
	recorder *MockL1MockRecorder
}

// MockL1MockRecorder is the mock recorder for MockL1.
type MockL1MockRecorder struct {
	mock *MockL1
}

// NewMockL1 creates a new mock instance.
func NewMockL1(ctrl *gomock.Controller) *MockL1 {
	mock := &MockL1{ctrl: ctrl}
	mock.recorder = &MockL1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockL1) EXPECT() *MockL1MockRecorder {
	return m.recorder
}

// WatchL1Heads mocks base method.
func (m *MockL1) WatchL1Heads(arg0 context.Context, arg1 chan<- *core.L1Head) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchL1Heads", arg0, arg1)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchL1Heads indicates an expected call of WatchL1Heads.
func (mr *MockL1MockRecorder) WatchL1Heads(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchL1Heads", reflect.TypeOf((*MockL1)(nil).WatchL1Heads), arg0, arg1)
}
